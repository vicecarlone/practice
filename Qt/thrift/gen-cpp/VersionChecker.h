/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef VersionChecker_H
#define VersionChecker_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "VersionChecker_types.h"

namespace VersionChecker {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class VersionCheckerIf {
 public:
  virtual ~VersionCheckerIf() {}
  virtual void fetchVersion(Version& _return, const Version& ver) = 0;
  virtual void getFile() = 0;
};

class VersionCheckerIfFactory {
 public:
  typedef VersionCheckerIf Handler;

  virtual ~VersionCheckerIfFactory() {}

  virtual VersionCheckerIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(VersionCheckerIf* /* handler */) = 0;
};

class VersionCheckerIfSingletonFactory : virtual public VersionCheckerIfFactory {
 public:
  VersionCheckerIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<VersionCheckerIf>& iface) : iface_(iface) {}
  virtual ~VersionCheckerIfSingletonFactory() {}

  virtual VersionCheckerIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(VersionCheckerIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<VersionCheckerIf> iface_;
};

class VersionCheckerNull : virtual public VersionCheckerIf {
 public:
  virtual ~VersionCheckerNull() {}
  void fetchVersion(Version& /* _return */, const Version& /* ver */) {
    return;
  }
  void getFile() {
    return;
  }
};

typedef struct _VersionChecker_fetchVersion_args__isset {
  _VersionChecker_fetchVersion_args__isset() : ver(false) {}
  bool ver :1;
} _VersionChecker_fetchVersion_args__isset;

class VersionChecker_fetchVersion_args {
 public:

  VersionChecker_fetchVersion_args(const VersionChecker_fetchVersion_args&);
  VersionChecker_fetchVersion_args& operator=(const VersionChecker_fetchVersion_args&);
  VersionChecker_fetchVersion_args() {
  }

  virtual ~VersionChecker_fetchVersion_args() throw();
  Version ver;

  _VersionChecker_fetchVersion_args__isset __isset;

  void __set_ver(const Version& val);

  bool operator == (const VersionChecker_fetchVersion_args & rhs) const
  {
    if (!(ver == rhs.ver))
      return false;
    return true;
  }
  bool operator != (const VersionChecker_fetchVersion_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VersionChecker_fetchVersion_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class VersionChecker_fetchVersion_pargs {
 public:


  virtual ~VersionChecker_fetchVersion_pargs() throw();
  const Version* ver;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VersionChecker_fetchVersion_result__isset {
  _VersionChecker_fetchVersion_result__isset() : success(false) {}
  bool success :1;
} _VersionChecker_fetchVersion_result__isset;

class VersionChecker_fetchVersion_result {
 public:

  VersionChecker_fetchVersion_result(const VersionChecker_fetchVersion_result&);
  VersionChecker_fetchVersion_result& operator=(const VersionChecker_fetchVersion_result&);
  VersionChecker_fetchVersion_result() {
  }

  virtual ~VersionChecker_fetchVersion_result() throw();
  Version success;

  _VersionChecker_fetchVersion_result__isset __isset;

  void __set_success(const Version& val);

  bool operator == (const VersionChecker_fetchVersion_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const VersionChecker_fetchVersion_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VersionChecker_fetchVersion_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VersionChecker_fetchVersion_presult__isset {
  _VersionChecker_fetchVersion_presult__isset() : success(false) {}
  bool success :1;
} _VersionChecker_fetchVersion_presult__isset;

class VersionChecker_fetchVersion_presult {
 public:


  virtual ~VersionChecker_fetchVersion_presult() throw();
  Version* success;

  _VersionChecker_fetchVersion_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class VersionChecker_getFile_args {
 public:

  VersionChecker_getFile_args(const VersionChecker_getFile_args&);
  VersionChecker_getFile_args& operator=(const VersionChecker_getFile_args&);
  VersionChecker_getFile_args() {
  }

  virtual ~VersionChecker_getFile_args() throw();

  bool operator == (const VersionChecker_getFile_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const VersionChecker_getFile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VersionChecker_getFile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class VersionChecker_getFile_pargs {
 public:


  virtual ~VersionChecker_getFile_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class VersionChecker_getFile_result {
 public:

  VersionChecker_getFile_result(const VersionChecker_getFile_result&);
  VersionChecker_getFile_result& operator=(const VersionChecker_getFile_result&);
  VersionChecker_getFile_result() {
  }

  virtual ~VersionChecker_getFile_result() throw();

  bool operator == (const VersionChecker_getFile_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const VersionChecker_getFile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VersionChecker_getFile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class VersionChecker_getFile_presult {
 public:


  virtual ~VersionChecker_getFile_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class VersionCheckerClient : virtual public VersionCheckerIf {
 public:
  VersionCheckerClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  VersionCheckerClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void fetchVersion(Version& _return, const Version& ver);
  void send_fetchVersion(const Version& ver);
  void recv_fetchVersion(Version& _return);
  void getFile();
  void send_getFile();
  void recv_getFile();
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class VersionCheckerProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<VersionCheckerIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (VersionCheckerProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_fetchVersion(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getFile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  VersionCheckerProcessor(::apache::thrift::stdcxx::shared_ptr<VersionCheckerIf> iface) :
    iface_(iface) {
    processMap_["fetchVersion"] = &VersionCheckerProcessor::process_fetchVersion;
    processMap_["getFile"] = &VersionCheckerProcessor::process_getFile;
  }

  virtual ~VersionCheckerProcessor() {}
};

class VersionCheckerProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  VersionCheckerProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< VersionCheckerIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< VersionCheckerIfFactory > handlerFactory_;
};

class VersionCheckerMultiface : virtual public VersionCheckerIf {
 public:
  VersionCheckerMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<VersionCheckerIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~VersionCheckerMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<VersionCheckerIf> > ifaces_;
  VersionCheckerMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<VersionCheckerIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void fetchVersion(Version& _return, const Version& ver) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchVersion(_return, ver);
    }
    ifaces_[i]->fetchVersion(_return, ver);
    return;
  }

  void getFile() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getFile();
    }
    ifaces_[i]->getFile();
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class VersionCheckerConcurrentClient : virtual public VersionCheckerIf {
 public:
  VersionCheckerConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  VersionCheckerConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void fetchVersion(Version& _return, const Version& ver);
  int32_t send_fetchVersion(const Version& ver);
  void recv_fetchVersion(Version& _return, const int32_t seqid);
  void getFile();
  int32_t send_getFile();
  void recv_getFile(const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
