/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef VersionChecker_TYPES_H
#define VersionChecker_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>


namespace VersionChecker {

class Version;

typedef struct _Version__isset {
  _Version__isset() : version(false), _major(false), _minor(false), additional(false) {}
  bool version :1;
  bool _major :1;
  bool _minor :1;
  bool additional :1;
} _Version__isset;

class Version : public virtual ::apache::thrift::TBase {
 public:

  Version(const Version&);
  Version& operator=(const Version&);
  Version() : version(0), _major(0), _minor(0), additional(0) {
  }

  virtual ~Version() throw();
  int32_t version;
  int32_t _major;
  int32_t _minor;
  int32_t additional;

  _Version__isset __isset;

  void __set_version(const int32_t val);

  void __set__major(const int32_t val);

  void __set__minor(const int32_t val);

  void __set_additional(const int32_t val);

  bool operator == (const Version & rhs) const
  {
    if (!(version == rhs.version))
      return false;
    if (!(_major == rhs._major))
      return false;
    if (!(_minor == rhs._minor))
      return false;
    if (!(additional == rhs.additional))
      return false;
    return true;
  }
  bool operator != (const Version &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Version & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Version &a, Version &b);

std::ostream& operator<<(std::ostream& out, const Version& obj);

} // namespace

#endif
